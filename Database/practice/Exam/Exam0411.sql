-- 1. 아래의 3 SQL을 결과를 비교한후 설명하시오
select * from dept;
select * from emp;

SELECT D.DNAME,E.ENAME,E.JOB,E.SAL FROM EMP E,DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO ORDER BY D.DNAME;
-- DEPT (오른쪽)을 기준으로 Outer 조인

SELECT D.DNAME,E.ENAME,E.JOB,E.SAL FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO AND E.SAL > 2000 ORDER BY D.DNAME; -- Outer Join 후 필터링
-- DEPT (오른쪽)을 기준으로 Oute 조인 이후, SAL이 2000이 넘는 것을 필터링

SELECT D.DNAME,E.ENAME,E.JOB,E.SAL FROM EMP E,DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO AND E.SAL(+) > 2000 ORDER BY D.DNAME; -- Outer Join
-- Outer Join은 기준이 되는 테이블에는 Join조건이 매칭되지 않더라도 null을 포함해 조인한다.
-- E.SAL(+)에도 Outer Join이 적용돼서, DEPT를 기준으로 SAL 값이 2000이 되지 않더라도 포함되었다.

CREATE TABLE SYSTEM( SYSTEM_ID VARCHAR2(5),
SYSTEM_NAME VARCHAR2(10)
);
INSERT INTO SYSTEM VALUES('XXX','혜화DB');
INSERT INTO SYSTEM VALUES('YYY','강남DB');
INSERT INTO SYSTEM VALUES('ZZZ','영등포DB');
CREATE TABLE RESOURCE_USAGE(SYSTEM_ID VARCHAR2(5),
RESOURCE_NAME VARCHAR2(10)
);
INSERT INTO RESOURCE_USAGE VALUES('XXX','FTP');
INSERT INTO RESOURCE_USAGE VALUES('YYY','FTP');
INSERT INTO RESOURCE_USAGE VALUES('YYY','TELNET');
INSERT INTO RESOURCE_USAGE VALUES('YYY','EMAIL');
COMMIT;

SELECT S.SYSTEM_ID,S.SYSTEM_NAME,R.RESOURCE_NAME
FROM SYSTEM S, RESOURCE_USAGE R
WHERE S.SYSTEM_ID = R.SYSTEM_ID;

SELECT S.SYSTEM_ID,S.SYSTEM_NAME,R.RESOURCE_NAME
FROM SYSTEM S,RESOURCE_USAGE R
WHERE S.SYSTEM_ID = R.SYSTEM_ID(+);