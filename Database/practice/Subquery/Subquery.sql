-- 서브쿼리 --
--------------- 단일값 Single Column, Single ROW----------------------------
-- 1. 
SELECT ENAME, JOB FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'SMITH');

-- 2.
SELECT ENAME, SAL FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP);

-- SINGLE COLUMN, MULTIPLE ROW RETURN SUBQUERY
-- 1.
SELECT ENAME, JOB FROM EMP WHERE DEPTNO = 10, 30;

-- 2
-- 복수개의 값을 처리하기 위해서는 IN, ANY, ALL 리스트 연산자 사용
SELECT ENAME, JOB FROM EMP WHERE DEPTNO IN (10, 30);

-- 3.
SELECT DNAME,LOC FROM DEPT -- 3인 이상 근무 부서 정보조회 ??
WHERE DEPTNO = (SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(*) > 3 );

SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(*) > 3;

-- MULTIPLE COLUMN, MULTIPLE ROW RETURN
SELECT DEPTNO,JOB,ENAME,SAL FROM EMP
WHERE (DEPTNO,JOB) IN (SELECT DEPTNO,JOB FROM EMP
											 GROUP BY DEPTNO,JOB HAVING AVG(SAL) > 2000);
                                             
-- Scalar Subquery
-- 1.
SELECT DEPTNO,ENAME,JOB,SAL,( SELECT ROUND(AVG(SAL),0)
FROM EMP S WHERE S.JOB=M.JOB) AS JOB_AVG_SAL 
FROM EMP M
ORDER BY JOB;

-- CORRELATIED SUBQUERY (상관서브쿼리) - 매우 비효율적
SELECT DEPTNO,ENAME,JOB,SAL FROM EMP M
WHERE SAL > ( SELECT AVG(SAL) AS AVG_SAL FROM EMP WHERE JOB = M.JOB );

-- In-Line View (From 절에 사용되는 서브쿼리)
SELECT DEPTNO, ENAME,EMP.JOB,SAL,IV.AVG_SAL
FROM EMP, (SELECT JOB,ROUND(AVG(SAL)) AS AVG_SAL FROM EMP GROUP BY JOB) IV
WHERE EMP.JOB = IV.JOB AND SAL > IV.AVG_SAL
ORDER BY DEPTNO ,SAL DESC;

-- TOP-N, BOTTOM-M
-- 1.
SELECT *
FROM (SELECT EMPNO, ENAME, SAL FROM EMP ORDER BY SAL ASC) BM
WHERE ROWNUM <= 5;

-- 2.
SELECT TN.EMPNO, TN.ENAME, TN.SAL
FROM (SELECT EMPNO, ENAME, SAL FROM EMP ORDER BY SAL DESC) TN
WHERE ROWNUM < 5;

----------- DML 연산과 SUBQUERY ------------------
-- 1.  SUBQUERY로 한번에 N개 Rows INSERT
INSERT INTO BONUS(ENAME,JOB,SAL,COMM) SELECT ENAME,JOB,SAL,COMM FROM EMP;
SELECT * FROM BONUS;
ROLLBACK;
SELECT * FROM BONUS;

-- 2. 부서별 성과별 보너스 계산후(데이터 연산) N개 Rows INSERT + 데이터 연산(가공)
INSERT INTO BONUS(ENAME, JOB, SAL, COMM)
SELECT ENAME, JOB, SAL, DECODE(DEPTNO, 10, SAL*0.3, 20, SAL*0.2) + NVL(COMM, 0)
FROM EMP WHERE DEPTNO IN (10, 20);

SELECT * FROM BONUS;
COMMIT;

-- 3. 평상시 COMM을 받지 못하는 사원들에게 평균 COMM 금액의 50%를 보너스로 지급
UPDATE EMP SET COMM = (SELECT AVG(COMM)/2 FROM EMP)
WHERE COMM IS NULL OR COMM = 0;
SELECT * FROM EMP;
COMMIT;

-- 4. 평균 이상의 급여를 받는 사원들은 보너스 지급 대상자에서 제외
DELETE FROM BONUS WHERE SAL > (SELECT AVG(SAL) FROM EMP);
COMMIT;
SELECT * FROM BONUS;

